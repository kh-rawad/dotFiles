function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Open all modified files in vim tabs
function vimod {
    vim -p $(git status -suall | awk '{print $2}')
}

# view MarkDown files in terminal
function readmd() { 
    pandoc "$1" | lynx --stdin 
}

function treee(){
    #####################################################
    # Unix/Linux Folder Tree v2.9                       #
    #                                                   #
    # Displays structure of folder hierarchy            #
    # ------------------------------------------------- #
    # This tiny script uses "ls", "grep", and "sed"     #
    # in a single command to show the nesting of        #
    # subfolders.                                       #
    #                                                   #
    # Setup:                                            #
    #    $ mkdir -p ~/apps/tree                         #
    #    Save "tree.sh" into the "~/apps/tree" folder   #
    #    $ cd ~/apps/tree                               #
    #    $ chmod +x tree.sh                             #
    #    $ ln -s tree.sh /usr/local/bin/tree            #
    #    $ which tree                                   #
    #                                                   #
    # Usage:                                            #
    #    $ tree [FOLDER]                                #
    #                                                   #
    # Examples:                                         #
    #    $ tree                                         #
    #    $ tree /usr/local/etc                          #
    #    $ tree ..                                      #
    #                                                   #
    # WTFPL ~ https://centerkey.com/tree ~ Dem Pilafian #
    #####################################################

    test -n "$1" && cd "$1";  #if parameter exists, use as base folder
    pwd;
    ls -R | grep "^[.]/" | sed -e "s/:$//" -e "s/[^\/]*\//--/g" -e "s/^/   |/";
    # Transformations:
    #     grep    --> select folders (filter out files)
    #     1st sed --> remove trailing colon
    #     2nd sed --> replace higher level folder names with dashes
    #     3rd sed --> indent graph and add leading vertical bar
    topFolders=$(ls -aF -1 | grep "/" | wc -l);
    test $topFolders -ne 0 || echo "   --> no subfolders";
}

function install_font_zip(){
    # Usage:
    # install_font_zip "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraCode.zip"

    # Check if the URL is provided
    if [ -z "$1" ]; then
    echo "Please provide a URL to a font zip file."
    exit 1
    fi

    # Create a temporary directory
    TEMP_DIR=$(mktemp -d)

    # Download the font zip file
    wget -O "$TEMP_DIR/font.zip" "$1"

    # Unzip the font file
    unzip "$TEMP_DIR/font.zip" -d "$TEMP_DIR"

    # Move the font files to the system fonts directory
    sudo mv "$TEMP_DIR"/*.{ttf,otf} /usr/local/share/fonts/

    # Update the font cache
    fc-cache -f -v

    # Clean up
    rm -rf "$TEMP_DIR"

    echo "Fonts installed successfully!"
}

function manual_install() {
    # Usage: manual_install <url> <binary_name> <destination_dir>
    local url="$1"
    local bin_name="$2"
    local dest_dir="$3"
    local executable="$4"

    echo "Installing $bin_name from $url to $dest_dir"
    if [[ -z "$url" || -z "$bin_name" || -z "$dest_dir" ]]; then
        echo "Usage: manual_install <url> <binary_name> <destination_dir>"
        return 1
    fi
    if [[ ! -d $dest_dir ]]; then
        mkdir -p "$dest_dir" || { echo "Failed to create directory $dest_dir"; return 1; }
    fi

    echo "Downloading $bin_name from $url"
    TMPDIR=$(mktemp -d)
    cd "$TMPDIR" || { echo "Failed to change directory to $TMPDIR"; return 1; }
    trap 'rm -rf "$TMPDIR"' EXIT  # Ensure cleanup on exit

    curl -sL "$url" -o downloaded_archive || { echo "Download failed!"; return 1; }

    if [[ "$url" == *.zip ]]; then
        unzip -o downloaded_archive || { echo "Unzip failed!"; return 1; }
        rm -rf downloaded_archive
    elif [[ "$url" == *.tar.gz ]] || [[ "$url" == *.tgz ]]; then
        tar -xzf downloaded_archive || { echo "tar extraction failed!"; return 1; }
        rm -rf downloaded_archive
    else
        echo "not archive type."
        mv downloaded_archive "$bin_name" || { echo "rename failed!"; return 1; }
        echo "copying file to $dest_dir"
    fi

    if [[ "$bin_name" == "*" ]]; then
        if [[ "$executable" == "exec" || "$executable" == "executable" ]]; then
            chmod +x ./*
        fi
        sudo mv ./* "$dest_dir"/ || { echo "Move failed!"; cd -; rm -rf "$TMPDIR"; return 1; }
    else
        if [[ "$executable" == "exec" || "$executable" == "executable" ]]; then
            chmod +x "$bin_name" || { echo "chmod failed!"; cd -; rm -rf "$TMPDIR"; return 1; }
        fi
        sudo mv "$bin_name" "$dest_dir"/ || { echo "Move failed!"; cd -; rm -rf "$TMPDIR"; return 1; }
    fi
    echo "$bin_name installed to $dest_dir"
    cd -
}